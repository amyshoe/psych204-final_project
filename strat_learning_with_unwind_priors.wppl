// // globalStore.time_allotted = 60
// globalStore.time_elapsed = 0
// var increment_time = function(t){globalStore.time_elapsed = globalStore.time_elapsed + t}

//var time_elapse = function(time, lapse){return time - lapse}

var unwind = function(problem, ops_order, num_seq){
  // Student could not solve problem
  if (ops_order[0] == 'panic') {
    return null
  }
  // First operation
  if (ops_order[0] == '-') {
    var step1 = problem.inputs[num_seq[0]] - problem.inputs[num_seq[1]]
    // Second operation
    if (ops_order[1] == '/') {
      var answer = step1 / problem.inputs[num_seq[2]]
      return answer
    }
    else {
      var answer = step1 - problem.inputs[num_seq[2]]
      return answer
    }
  }
  // First operation
  else {
    var step1 = problem.inputs[num_seq[0]] / problem.inputs[num_seq[1]]
    // Second operation
    if (ops_order[1] == '/') {
      var answer = step1 / problem.inputs[num_seq[2]]
      return answer
    }
    else {
      var answer = step1 - problem.inputs[num_seq[2]]
      return answer
    }
  }
}


var guess_check = function(problem) {
  // guess and check helper function
  var make_guess = function(lower, upper, time) {
    var guess = uniformDraw(_.range(lower,upper))
    var plugged_in = guess * problem.inputs[1] + problem.inputs[2]
    if (plugged_in < problem.inputs[3]) { // guess was too small
//       increment_time(2)
//       if (globalStore.time_elapsed < globalStore.time_allotted) 
      if (time - 2 >= 0){
        return make_guess(guess + 1, guess + 10, time - 2)
      } else {return null}
    } else if (plugged_in > problem.inputs[3]) { // guess was too large
//       increment_time(2)
//       if (globalStore.time_elapsed < globalStore.time_allotted) {
      if (problem.time - 2 >= 0){
        return make_guess(guess - 10, guess - 1, time - 2)
      } else {return null}
    } else { // guess was correct
      return guess
    }
  }
  var lower = 1
  var upper = 11
  var time = problem.time;
  return make_guess(lower, upper)
}

var sym_manip = function(problem, first_ops, second_ops) {
  //could include some sort of panic function? This would make it different from unwind though.
  // var panic = function () {return flip(0.05)}
  if (first_ops == 'null' && second_ops == 'null') { // base case
    return problem.inputs[1];

  } else if (first_ops == 'null'){
    //each recursion returns a symplified version of the problem
    if (second_ops[2] == '-'){ //subtract second
      var new_inputs = ['x', problem.inputs[second_ops[1]] - problem.inputs[second_ops[0]]]
      var symplified_problem = {verbal: false, inputs: new_inputs, time: problem.time - 2};
      if (problem.time - 2 < 0) {return null} //time condition
      else {return sym_manip(symplified_problem, 'null', 'null')}

    } else if (second_ops[2] == '/'){ //divide second

      var new_inputs = ['x', problem.inputs[second_ops[1]]/problem.inputs[second_ops[0]]]
      var symplified_problem = {verbal: false, inputs: new_inputs, time: problem.time - 2}
      if (problem.time - 2 < 0) {return null}  //time condition
      else {return sym_manip(symplified_problem, 'null', 'null')}    
    }

  } else { //first_ops != null
    if (first_ops[2] == '-'){ //subtract first
      if (any(function(x){return x == 2}, first_ops)) { //find which of the three numbers is not in the operation
        var new_inputs = ['x', problem.inputs[1], problem.inputs[first_ops[1]] - problem.inputs[first_ops[0]]]
        var symplified_problem = {verbal: false, inputs: new_inputs, time: problem.time - 2}
        if (problem.time - 2 < 0) {return null}  //time condition
        else {return sym_manip(symplified_problem, 'null', second_ops)}

      } else {

        var new_inputs = ['x', problem.inputs[2], problem.inputs[first_ops[1]] - problem.inputs[first_ops[0]]]
        var symplified_problem = {verbal: false, inputs: new_inputs, time: problem.time - 2}
        if (problem.time - 2 < 0) {return null} 
        else {return sym_manip(symplified_problem, 'null', second_ops)}
      }

    } else if (first_ops[2] == '/'){ //divide first
      if (any(function(x){return x == 2}, first_ops)) { //find which of the three numbers are not involved in operation

        var new_inputs = ['x', problem.inputs[1], problem.inputs[first_ops[1]] / problem.inputs[first_ops[0]]]
        var symplified_problem = {verbal: false, inputs: new_inputs, time: problem.time - 2}
        if (problem.time - 2 < 0){ return null }
        else {return sym_manip(symplified_problem, 'null', second_ops)}

      } else {

        var new_inputs = ['x', problem.inputs[2], problem.inputs[first_ops[1]] / problem.inputs[first_ops[0]]]
        var symplified_problem = {verbal: false, inputs: new_inputs, time: problem.time - 2}
        if (problem.time - 2 < 0) {return null} 
        else {return sym_manip(symplified_problem, 'null', second_ops)}
      }
    }
  }
}

var story2eq = function(problem){
  if(flip(0.9)) { // correct translation
    var modified_problem = {verbal: true, inputs: problem.inputs, ops: ['*', '+', '='], time: 4}
    return modified_problem
  } else { // switched a and b --> x*b + a = c
    var new_inputs = ['x', problem.inputs[2], problem.inputs[1], problem.inputs[3]]
    var modified_problem = {verbal: true, inputs: new_inputs, ops: ['*', '+', '='], time: 4}
    return modified_problem
  }
}

var getAnswerDist = cache(function(problem, strategy) {
    // Do any necessary conversions
    // Time allotted per question: 6
  return Infer ({method: 'enumerate'}, function(){
      var probToSolve = (problem.verbal && strategy[0] == 'sym_manip')? story2eq(problem) : problem;
      // Solve the problem with the given strategy!
      if (strategy[0] == "unwind") { 
        return unwind(probToSolve, strategy[1], strategy[2])
      } else if (strategy[0] == "sym_manip") { 
        return sym_manip(probToSolve, probToSolve.time)
      } else { 
        return guess_check(probToSolve) 
      }
  })
})

var model = function() {
  
    // Data
    var problem1 = {verbal: true, inputs: ['x', 6, 66, 84], ops: ['per', 'and', 'total'], time: 6}
    var problem2 = {verbal: false, inputs: ['x', 6, 66, 84], ops: ['*', '+', '='], time: 6}
    var problem3 = {verbal: true, inputs: ['x', 3, 64, 133], ops: ['each', 'and', 'is'], time: 6}
    var problem4 = {verbal: false, inputs: ['x', 3, 64, 133], ops: ['*', '+', '='], time: 6}
    var problem5 = {verbal: true, inputs: ['x', 5, 22, 47], ops: ['each', 'and', 'is'], time: 6}
    var problem6 = {verbal: false, inputs: ['x', 5, 22, 47], ops: ['*', '+', '='], time: 6}
    var observedData = [problem1, problem2, problem3, problem4, problem5, problem6]
    var trueAnswers = [3, 3, 23, 23, 5, 5]
    var indices = [0,1,2,3,4,5] // range(observedData.length)
    var strategies = ['unwind', 'guess_check', 'sym_manip']
    // prior for which strategy: unwind/untangle, guess n check, symbolic manip
    //var stratPrior = T.toScalars(dirichlet(ones([strategies.length, 1])))
    var eqStratPrior = T.toScalars(dirichlet(Vector([1,1,5]))); //also: [1, 3, 5]
    var storyStratPrior = T.toScalars(dirichlet(Vector([3,1,1]))) //also: [3, 2, 1]
    var chooseStrategies = function(problem){
        if (problem.verbal){
           return sample(Categorical({ps: storyStratPrior, vs: strategies}));
        } else {
          return sample(Categorical({ps: eqStratPrior, vs: strategies}));
        }
    }
    
    
    // Set priors for UNWIND strategy
    var EQ_op_order = ['panic',['/','-'],['-','/']]
    var EQ_num_seq = [[3,2,1], [3,1,2], [2,3,1], [2,1,3]]
    var eqUnwindPrior_ops = T.toScalars(dirichlet(Vector([4,2,2])))
    var eqUnwindPrior_nums = T.toScalars(dirichlet(Vector([2,2,2,2])))

    var STORY_op_order = ['panic',['/','-'],['-','/']]
    var STORY_num_seq = [[3,2,1], [3,1,2]]
    var storyUnwindPrior_ops = T.toScalars(dirichlet(Vector([1,3,3])))
    var storyUnwindPrior_nums = T.toScalars(dirichlet(Vector([2,2])))
  
    var chooseUnwindOps = function(problem){
      if (problem.verbal){
        return sample(Categorical({ps: storyUnwindPrior_ops, vs: STORY_op_order}));
      }
      else {
        return sample(Categorical({ps: eqUnwindPrior_ops, vs: EQ_op_order}));
      }
    }
    var chooseUnwindNums = function(problem){
      if (problem.verbal){
        return sample(Categorical({ps: storyUnwindPrior_nums, vs: STORY_num_seq}));
      }
      else {
        return sample(Categorical({ps: eqUnwindPrior_nums, vs: EQ_num_seq}));
      }
    }
    
    var myUnwindOps = mapData({data: observedData}, chooseUnwindOps)
    var myUnwindNums = mapData({data: observedData}, chooseUnwindNums)
    
    var firstOpsPrior = T.toScalars(dirichlet(Vector([1,1,1,1]))); 
    var firstOps = [[1, 3, '-'], [2, 3, '-'], [1, 3, '/'], [2, 3, '/']];
    var chooseFirstOps= function(problem) {
      sample(Categorical({ps: firstOpsPrior, vs: firstOps}));
    }

    var secondOpsPrior = T.toScalars(dirichlet(Vector([1,1]))); //distribution over different ops sequences
    var secondOps= [[1, 2, '-'], [1, 2, '/']];
    var chooseSecondOps= function(problem){
      return sample(Categorical({ps: secondOpsPrior, vs: secondOps}));
    }

    var firstSymOps = mapData({data: observedData}, chooseFirstOps);
    var secondSymOps = mapData({data: observedData}, chooseSecondOps)

    // get answers, and condition on those answers being true
    var myStrategies = mapData({data: observedData}, chooseStrategies)
    var getStratData = function(idx) {
      if (myStrategies[idx] == 'unwind') {
        return [myStrategies[idx], myUnwindOps[idx], myUnwindNums[idx]]
      } else if (myStrategies[idx] == 'sym_manip') {
        return [myStrategies[idx], firstSymOps[idx], secondSymOps[idx]]
      } else {
        return [myStrategies[idx]]
      }
    }
    var relevantStratInfo = mapData({data: indices}, getStratData)
    var answerDist = map2(getAnswerDist, observedData, relevantStratInfo)
    //var obsFn = function(idx) {condition(myAnswers[idx] == trueAnswers[idx])}
    var obsFn = function(idx) {observe(answerDist, trueAnswers[idx])}
    mapData({data: indices}, obsFn)

    //new problems!
    var testProblem1 = {verbal: true, inputs: ['x', 10, 45, 75], ops: ['per', 'and', 'is'], time: 6}
    var testProblem2 = {verbal: false, inputs: ['x', 10, 45, 75], ops: ['*', '+', '='], time: 6}
    var testProblem3 = {verbal: true, inputs: ['x', 4, 2, 50], ops: ['each', 'and', 'total'], time: 6}
    var testProblem4 = {verbal: false, inputs: ['x', 4, 2, 50], ops: ['*', '+', '='], time: 6}
    var newData = [testProblem1, testProblem2, testProblem3, testProblem4]
    var newIndices = [0, 1, 2, 3]
    var newStrategies = mapData({data: newData}, chooseStrategies)
    var newUnwindOps = mapData({data: newData}, chooseUnwindOps)
    var newUnwindNums = mapData({data: newData}, chooseUnwindNums)
    
    var getNewStratData = function(idx) {
      if (newStrategies[idx] == 'unwind') {
        return [myStrategies[idx], myUnwindOps[idx], myUnwindNums[idx]]
      }
      else {
        return [newStrategies[idx]]
      }
    }
    var newRelevantStratInfo = mapData({data: newIndices}, getNewStratData)
    var newAnswerDist = map2(getAnswerDist, newData, newRelevantStratInfo)
    
//     return {Story1: newAnswers[0], Eq1: newAnswers[1], Story2: newAnswers[2], Eq2: newAnswers[3]}
    // return {EQunwindProb: eqStratPrior[0],
    //         EQguessProb: eqStratPrior[1],
    //         EQsymManipProb: eqStratPrior[2],
    //         STORYunwindProb: storyStratPrior[0],
    //         STORYguessCheckProb: storyStratPrior[1],
    //         STORYsymManipProb: storyStratPrior[2],
    //         STORY1Answers: newAnswers[0],
    //         STORY2Answers: newAnswers[2],
    //         EQ1Answers: newAnswers[1],
    //         EQ2Answers: newAnswers[3]}
    return newAnswerDist;
//     return {eq_strategies: eqStrats}
//     return {story_strategies: storyStrats}    
}


var d = Infer({method: 'MCMC', samples: 100000}, model)

viz.marginals(d)//, {xLabel: "Strategy Used"})

//THING2:  POSTERIOR PREDICTIVES (NEW DATA)
//THING3:  TRY DIFFERENT PRIORS FOR DIFFERENT PROBLEMS